'use server';
/* eslint-disable @typescript-eslint/no-explicit-any */
import { supabase } from '@/lib/supabaseClient';
import { revalidatePath } from 'next/cache';
import { Constants } from '@/config/constants'; // Import constants
import { uploadStorageFile, deleteStorageFile } from '@/lib/storageUtils'; // Import shared helpers
import { generateSlug } from '@/lib/utils'; // Assuming generateSlug is here now

/**
 * Creates a new category with uploaded images using shared helpers.
 */
export async function createCategory(formData: FormData): Promise<{ success: boolean; message: string; categoryId?: string }> {
  const categoryName = formData.get('categoryName')?.toString().trim();
  const description = formData.get('description')?.toString().trim();
  const seoTitle = formData.get('seoTitle')?.toString().trim();
  const seoDescription = formData.get('seoDescription')?.toString().trim();
  const seoMetaDescription = formData.get('seoMetaDescription')?.toString().trim(); // <-- Get the new field
  // --- Get Files ---
  const heroImageFile = formData.get('heroImageFile') as File | null;
  const thumbnailImageFile = formData.get('thumbnailImageFile') as File | null;
  // --- End Get Files ---

  // --- Basic Validation ---
  // Add seoMetaDescription to validation if needed (e.g., length)
  if (!categoryName || !description || !seoTitle || !seoDescription /* || !seoMetaDescription */) {
    return { success: false, message: 'Missing required text fields.' };
  }
  if (!heroImageFile || heroImageFile.size === 0) { // Check size too
    return { success: false, message: 'Hero image file is required.' };
  }
   if (!thumbnailImageFile || thumbnailImageFile.size === 0) { // Check size too
    return { success: false, message: 'Thumbnail image file is required.' };
  }
  // --- End Basic Validation ---

  // Generate slug
  const slug = generateSlug(categoryName); // Use imported generateSlug
  if (!slug) {
    return { success: false, message: 'Category name must contain valid characters for slug.' };
  }

  let heroImagePath: string | null = null;
  let thumbnailImagePath: string | null = null;
  const heroBucket = Constants.SUPABASE_HERO_IMAGES_NAME;
  const thumbnailBucket = Constants.SUPABASE_THUMBNAIL_IMAGES_NAME;

  try {
    // 1. Upload Hero Image using shared helper
    console.log(`Uploading hero image for category "${categoryName}"...`);
    const heroUploadResult = await uploadStorageFile(heroBucket, heroImageFile);
    if (heroUploadResult.error || !heroUploadResult.path) {
      return { success: false, message: `Hero image upload failed: ${heroUploadResult.error}` };
    }
    heroImagePath = heroUploadResult.path;
    console.log(`Hero image uploaded: ${heroImagePath}`);

    // 2. Upload Thumbnail Image using shared helper
    console.log(`Uploading thumbnail image for category "${categoryName}"...`);
    const thumbnailUploadResult = await uploadStorageFile(thumbnailBucket, thumbnailImageFile);
    if (thumbnailUploadResult.error || !thumbnailUploadResult.path) {
      // Rollback: Delete hero image if thumbnail upload fails
      if (heroImagePath) {
        console.log(`Rolling back hero image upload: ${heroImagePath}`);
        await deleteStorageFile(heroBucket, heroImagePath); // Use shared helper
      }
      return { success: false, message: `Thumbnail image upload failed: ${thumbnailUploadResult.error}` };
    }
    thumbnailImagePath = thumbnailUploadResult.path;
    console.log(`Thumbnail image uploaded: ${thumbnailImagePath}`);

    // 3. Insert Category Metadata into Database
    console.log(`Inserting category "${categoryName}" into database...`);
    // Define the type for insertion, excluding fields generated by DB
    const insertData = {
        name: categoryName,
        slug: slug,
        description: description || null,
        seo_title: seoTitle || null,
        seo_description: seoDescription || null,
        seo_meta_description: seoMetaDescription || null,
        hero_image: heroImagePath, // Renamed field, value is still the path
        thumbnail_image: thumbnailImagePath, // Renamed field, value is still the path
    };

    const { data: newCategory, error: insertError } = await supabase
      .from('categories')
      .insert(insertData)
      .select('id') // Select only the ID
      .single();

    if (insertError) {
      console.error('Error inserting category:', insertError.message);
      // Rollback: Delete both uploaded images if DB insert fails
      if (heroImagePath) await deleteStorageFile(heroBucket, heroImagePath);
      if (thumbnailImagePath) await deleteStorageFile(thumbnailBucket, thumbnailImagePath);
      console.log('Rolled back storage uploads due to DB error.');

      // Handle specific DB errors (like unique constraints)
      if (insertError.code === '23505') { // Unique violation
        if (insertError.message.includes('categories_name_key')) {
          return { success: false, message: `Category name "${categoryName}" already exists.` };
        }
        if (insertError.message.includes('categories_slug_key')) {
          return { success: false, message: `Generated slug "${slug}" already exists. Try a different name.` };
        }
        // Add check for seo_meta_description unique constraint if you add one
      }
      return { success: false, message: `Database error: ${insertError.message}` };
    }

    // 4. Success - Revalidate Paths
    console.log(`Category "${categoryName}" created successfully with ID: ${newCategory.id}.`);
    revalidatePath('/admin/categories');
    // revalidatePath('/admin/categories/create'); // No need to revalidate the create page itself
    revalidatePath('/admin');
    revalidatePath('/coloring-pages', 'layout'); // Revalidate public pages that show categories

    return { success: true, message: `Category "${categoryName}" created successfully.`, categoryId: newCategory.id };

  } catch (err: any) {
    console.error('Unexpected error creating category:', err);
    // Attempt cleanup in case of unexpected errors
    if (heroImagePath) await deleteStorageFile(heroBucket, heroImagePath).catch(e => console.error("Cleanup failed (hero):", e));
    if (thumbnailImagePath) await deleteStorageFile(thumbnailBucket, thumbnailImagePath).catch(e => console.error("Cleanup failed (thumb):", e));

    const message = err instanceof Error ? err.message : 'An unexpected error occurred.';
    return { success: false, message };
  }
} 